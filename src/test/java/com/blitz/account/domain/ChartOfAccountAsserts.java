package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ChartOfAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChartOfAccountAllPropertiesEquals(ChartOfAccount expected, ChartOfAccount actual) {
        assertChartOfAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertChartOfAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChartOfAccountAllUpdatablePropertiesEquals(ChartOfAccount expected, ChartOfAccount actual) {
        assertChartOfAccountUpdatableFieldsEquals(expected, actual);
        assertChartOfAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChartOfAccountAutoGeneratedPropertiesEquals(ChartOfAccount expected, ChartOfAccount actual) {
        assertThat(actual)
            .as("Verify ChartOfAccount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChartOfAccountUpdatableFieldsEquals(ChartOfAccount expected, ChartOfAccount actual) {
        assertThat(actual)
            .as("Verify ChartOfAccount relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getAccountType()).as("check accountType").isEqualTo(expected.getAccountType()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a ->
                assertThat(a.getInitialBalance())
                    .as("check initialBalance")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getInitialBalance())
            )
            .satisfies(a ->
                assertThat(a.getCurrentBalance())
                    .as("check currentBalance")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCurrentBalance())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChartOfAccountUpdatableRelationshipsEquals(ChartOfAccount expected, ChartOfAccount actual) {
        // empty method
    }
}
