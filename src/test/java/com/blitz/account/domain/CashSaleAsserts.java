package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CashSaleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashSaleAllPropertiesEquals(CashSale expected, CashSale actual) {
        assertCashSaleAutoGeneratedPropertiesEquals(expected, actual);
        assertCashSaleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashSaleAllUpdatablePropertiesEquals(CashSale expected, CashSale actual) {
        assertCashSaleUpdatableFieldsEquals(expected, actual);
        assertCashSaleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashSaleAutoGeneratedPropertiesEquals(CashSale expected, CashSale actual) {
        assertThat(actual)
            .as("Verify CashSale auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashSaleUpdatableFieldsEquals(CashSale expected, CashSale actual) {
        assertThat(actual)
            .as("Verify CashSale relevant properties")
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a -> assertThat(a.getVatRateId()).as("check vatRateId").isEqualTo(expected.getVatRateId()))
            .satisfies(a -> assertThat(a.getCurrencyId()).as("check currencyId").isEqualTo(expected.getCurrencyId()))
            .satisfies(a -> assertThat(a.getSaleDate()).as("check saleDate").isEqualTo(expected.getSaleDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashSaleUpdatableRelationshipsEquals(CashSale expected, CashSale actual) {
        // empty method
    }
}
