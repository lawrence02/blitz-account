package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ServiceLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceLogAllPropertiesEquals(ServiceLog expected, ServiceLog actual) {
        assertServiceLogAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceLogAllUpdatablePropertiesEquals(ServiceLog expected, ServiceLog actual) {
        assertServiceLogUpdatableFieldsEquals(expected, actual);
        assertServiceLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceLogAutoGeneratedPropertiesEquals(ServiceLog expected, ServiceLog actual) {
        assertThat(actual)
            .as("Verify ServiceLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceLogUpdatableFieldsEquals(ServiceLog expected, ServiceLog actual) {
        assertThat(actual)
            .as("Verify ServiceLog relevant properties")
            .satisfies(a -> assertThat(a.getVehicleId()).as("check vehicleId").isEqualTo(expected.getVehicleId()))
            .satisfies(a -> assertThat(a.getServiceDate()).as("check serviceDate").isEqualTo(expected.getServiceDate()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCost()).as("check cost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getCost()))
            .satisfies(a -> assertThat(a.getMileageAtService()).as("check mileageAtService").isEqualTo(expected.getMileageAtService()))
            .satisfies(a -> assertThat(a.getSupplierId()).as("check supplierId").isEqualTo(expected.getSupplierId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceLogUpdatableRelationshipsEquals(ServiceLog expected, ServiceLog actual) {
        // empty method
    }
}
