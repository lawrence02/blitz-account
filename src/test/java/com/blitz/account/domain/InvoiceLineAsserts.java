package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InvoiceLineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineAllPropertiesEquals(InvoiceLine expected, InvoiceLine actual) {
        assertInvoiceLineAutoGeneratedPropertiesEquals(expected, actual);
        assertInvoiceLineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineAllUpdatablePropertiesEquals(InvoiceLine expected, InvoiceLine actual) {
        assertInvoiceLineUpdatableFieldsEquals(expected, actual);
        assertInvoiceLineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineAutoGeneratedPropertiesEquals(InvoiceLine expected, InvoiceLine actual) {
        assertThat(actual)
            .as("Verify InvoiceLine auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineUpdatableFieldsEquals(InvoiceLine expected, InvoiceLine actual) {
        assertThat(actual)
            .as("Verify InvoiceLine relevant properties")
            .satisfies(a -> assertThat(a.getInvoiceId()).as("check invoiceId").isEqualTo(expected.getInvoiceId()))
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a -> assertThat(a.getVatRateId()).as("check vatRateId").isEqualTo(expected.getVatRateId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineUpdatableRelationshipsEquals(InvoiceLine expected, InvoiceLine actual) {
        // empty method
    }
}
