package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RecurringTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecurringTransactionAllPropertiesEquals(RecurringTransaction expected, RecurringTransaction actual) {
        assertRecurringTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertRecurringTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecurringTransactionAllUpdatablePropertiesEquals(RecurringTransaction expected, RecurringTransaction actual) {
        assertRecurringTransactionUpdatableFieldsEquals(expected, actual);
        assertRecurringTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecurringTransactionAutoGeneratedPropertiesEquals(RecurringTransaction expected, RecurringTransaction actual) {
        assertThat(actual)
            .as("Verify RecurringTransaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecurringTransactionUpdatableFieldsEquals(RecurringTransaction expected, RecurringTransaction actual) {
        assertThat(actual)
            .as("Verify RecurringTransaction relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getFrequency()).as("check frequency").isEqualTo(expected.getFrequency()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getAccountId()).as("check accountId").isEqualTo(expected.getAccountId()))
            .satisfies(a -> assertThat(a.getCurrencyId()).as("check currencyId").isEqualTo(expected.getCurrencyId()))
            .satisfies(a -> assertThat(a.getVatRateId()).as("check vatRateId").isEqualTo(expected.getVatRateId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecurringTransactionUpdatableRelationshipsEquals(RecurringTransaction expected, RecurringTransaction actual) {
        // empty method
    }
}
