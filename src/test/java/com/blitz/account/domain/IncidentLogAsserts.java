package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class IncidentLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentLogAllPropertiesEquals(IncidentLog expected, IncidentLog actual) {
        assertIncidentLogAutoGeneratedPropertiesEquals(expected, actual);
        assertIncidentLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentLogAllUpdatablePropertiesEquals(IncidentLog expected, IncidentLog actual) {
        assertIncidentLogUpdatableFieldsEquals(expected, actual);
        assertIncidentLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentLogAutoGeneratedPropertiesEquals(IncidentLog expected, IncidentLog actual) {
        assertThat(actual)
            .as("Verify IncidentLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentLogUpdatableFieldsEquals(IncidentLog expected, IncidentLog actual) {
        assertThat(actual)
            .as("Verify IncidentLog relevant properties")
            .satisfies(a -> assertThat(a.getVehicleId()).as("check vehicleId").isEqualTo(expected.getVehicleId()))
            .satisfies(a -> assertThat(a.getTripId()).as("check tripId").isEqualTo(expected.getTripId()))
            .satisfies(a -> assertThat(a.getIncidentDate()).as("check incidentDate").isEqualTo(expected.getIncidentDate()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCost()).as("check cost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getCost()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentLogUpdatableRelationshipsEquals(IncidentLog expected, IncidentLog actual) {
        // empty method
    }
}
