package com.blitz.account.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FleetTripLocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripLocationAllPropertiesEquals(FleetTripLocation expected, FleetTripLocation actual) {
        assertFleetTripLocationAutoGeneratedPropertiesEquals(expected, actual);
        assertFleetTripLocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripLocationAllUpdatablePropertiesEquals(FleetTripLocation expected, FleetTripLocation actual) {
        assertFleetTripLocationUpdatableFieldsEquals(expected, actual);
        assertFleetTripLocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripLocationAutoGeneratedPropertiesEquals(FleetTripLocation expected, FleetTripLocation actual) {
        assertThat(actual)
            .as("Verify FleetTripLocation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripLocationUpdatableFieldsEquals(FleetTripLocation expected, FleetTripLocation actual) {
        assertThat(actual)
            .as("Verify FleetTripLocation relevant properties")
            .satisfies(a -> assertThat(a.getFleetTripId()).as("check fleetTripId").isEqualTo(expected.getFleetTripId()))
            .satisfies(a -> assertThat(a.getTimestamp()).as("check timestamp").isEqualTo(expected.getTimestamp()))
            .satisfies(a -> assertThat(a.getLatitude()).as("check latitude").isEqualTo(expected.getLatitude()))
            .satisfies(a -> assertThat(a.getLongitude()).as("check longitude").isEqualTo(expected.getLongitude()))
            .satisfies(a -> assertThat(a.getSpeed()).as("check speed").isEqualTo(expected.getSpeed()))
            .satisfies(a -> assertThat(a.getHeading()).as("check heading").isEqualTo(expected.getHeading()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripLocationUpdatableRelationshipsEquals(FleetTripLocation expected, FleetTripLocation actual) {
        // empty method
    }
}
