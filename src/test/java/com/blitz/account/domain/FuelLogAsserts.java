package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FuelLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelLogAllPropertiesEquals(FuelLog expected, FuelLog actual) {
        assertFuelLogAutoGeneratedPropertiesEquals(expected, actual);
        assertFuelLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelLogAllUpdatablePropertiesEquals(FuelLog expected, FuelLog actual) {
        assertFuelLogUpdatableFieldsEquals(expected, actual);
        assertFuelLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelLogAutoGeneratedPropertiesEquals(FuelLog expected, FuelLog actual) {
        assertThat(actual)
            .as("Verify FuelLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelLogUpdatableFieldsEquals(FuelLog expected, FuelLog actual) {
        assertThat(actual)
            .as("Verify FuelLog relevant properties")
            .satisfies(a -> assertThat(a.getVehicleId()).as("check vehicleId").isEqualTo(expected.getVehicleId()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getFuelVolume()).as("check fuelVolume").isEqualTo(expected.getFuelVolume()))
            .satisfies(a ->
                assertThat(a.getFuelCost()).as("check fuelCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getFuelCost())
            )
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getTripId()).as("check tripId").isEqualTo(expected.getTripId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFuelLogUpdatableRelationshipsEquals(FuelLog expected, FuelLog actual) {
        // empty method
    }
}
