package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class QuoteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteAllPropertiesEquals(Quote expected, Quote actual) {
        assertQuoteAutoGeneratedPropertiesEquals(expected, actual);
        assertQuoteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteAllUpdatablePropertiesEquals(Quote expected, Quote actual) {
        assertQuoteUpdatableFieldsEquals(expected, actual);
        assertQuoteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteAutoGeneratedPropertiesEquals(Quote expected, Quote actual) {
        assertThat(actual)
            .as("Verify Quote auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteUpdatableFieldsEquals(Quote expected, Quote actual) {
        assertThat(actual)
            .as("Verify Quote relevant properties")
            .satisfies(a -> assertThat(a.getClientName()).as("check clientName").isEqualTo(expected.getClientName()))
            .satisfies(a -> assertThat(a.getIssueDate()).as("check issueDate").isEqualTo(expected.getIssueDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCurrencyId()).as("check currencyId").isEqualTo(expected.getCurrencyId()))
            .satisfies(a -> assertThat(a.getVatRateId()).as("check vatRateId").isEqualTo(expected.getVatRateId()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteUpdatableRelationshipsEquals(Quote expected, Quote actual) {
        // empty method
    }
}
