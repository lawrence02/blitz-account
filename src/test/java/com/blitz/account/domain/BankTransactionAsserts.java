package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BankTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionAllPropertiesEquals(BankTransaction expected, BankTransaction actual) {
        assertBankTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertBankTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionAllUpdatablePropertiesEquals(BankTransaction expected, BankTransaction actual) {
        assertBankTransactionUpdatableFieldsEquals(expected, actual);
        assertBankTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionAutoGeneratedPropertiesEquals(BankTransaction expected, BankTransaction actual) {
        assertThat(actual)
            .as("Verify BankTransaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionUpdatableFieldsEquals(BankTransaction expected, BankTransaction actual) {
        assertThat(actual)
            .as("Verify BankTransaction relevant properties")
            .satisfies(a -> assertThat(a.getBankAccountId()).as("check bankAccountId").isEqualTo(expected.getBankAccountId()))
            .satisfies(a -> assertThat(a.getTransactionDate()).as("check transactionDate").isEqualTo(expected.getTransactionDate()))
            .satisfies(a -> assertThat(a.getReference()).as("check reference").isEqualTo(expected.getReference()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getDirection()).as("check direction").isEqualTo(expected.getDirection()))
            .satisfies(a -> assertThat(a.getRelatedPaymentId()).as("check relatedPaymentId").isEqualTo(expected.getRelatedPaymentId()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankTransactionUpdatableRelationshipsEquals(BankTransaction expected, BankTransaction actual) {
        // empty method
    }
}
