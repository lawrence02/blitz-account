package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class QuoteLineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteLineAllPropertiesEquals(QuoteLine expected, QuoteLine actual) {
        assertQuoteLineAutoGeneratedPropertiesEquals(expected, actual);
        assertQuoteLineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteLineAllUpdatablePropertiesEquals(QuoteLine expected, QuoteLine actual) {
        assertQuoteLineUpdatableFieldsEquals(expected, actual);
        assertQuoteLineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteLineAutoGeneratedPropertiesEquals(QuoteLine expected, QuoteLine actual) {
        assertThat(actual)
            .as("Verify QuoteLine auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteLineUpdatableFieldsEquals(QuoteLine expected, QuoteLine actual) {
        assertThat(actual)
            .as("Verify QuoteLine relevant properties")
            .satisfies(a -> assertThat(a.getQuoteId()).as("check quoteId").isEqualTo(expected.getQuoteId()))
            .satisfies(a -> assertThat(a.getProductId()).as("check productId").isEqualTo(expected.getProductId()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a -> assertThat(a.getVatRateId()).as("check vatRateId").isEqualTo(expected.getVatRateId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuoteLineUpdatableRelationshipsEquals(QuoteLine expected, QuoteLine actual) {
        // empty method
    }
}
