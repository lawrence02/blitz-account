package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FleetTripAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripAllPropertiesEquals(FleetTrip expected, FleetTrip actual) {
        assertFleetTripAutoGeneratedPropertiesEquals(expected, actual);
        assertFleetTripAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripAllUpdatablePropertiesEquals(FleetTrip expected, FleetTrip actual) {
        assertFleetTripUpdatableFieldsEquals(expected, actual);
        assertFleetTripUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripAutoGeneratedPropertiesEquals(FleetTrip expected, FleetTrip actual) {
        assertThat(actual)
            .as("Verify FleetTrip auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripUpdatableFieldsEquals(FleetTrip expected, FleetTrip actual) {
        assertThat(actual)
            .as("Verify FleetTrip relevant properties")
            .satisfies(a -> assertThat(a.getVehicleId()).as("check vehicleId").isEqualTo(expected.getVehicleId()))
            .satisfies(a -> assertThat(a.getDriverId()).as("check driverId").isEqualTo(expected.getDriverId()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getDistanceKm()).as("check distanceKm").isEqualTo(expected.getDistanceKm()))
            .satisfies(a -> assertThat(a.getStartLocation()).as("check startLocation").isEqualTo(expected.getStartLocation()))
            .satisfies(a -> assertThat(a.getEndLocation()).as("check endLocation").isEqualTo(expected.getEndLocation()))
            .satisfies(a -> assertThat(a.getLoadType()).as("check loadType").isEqualTo(expected.getLoadType()))
            .satisfies(a -> assertThat(a.getLoadDescription()).as("check loadDescription").isEqualTo(expected.getLoadDescription()))
            .satisfies(a ->
                assertThat(a.getRouteGeoCoordinates()).as("check routeGeoCoordinates").isEqualTo(expected.getRouteGeoCoordinates())
            )
            .satisfies(a ->
                assertThat(a.getTripCost()).as("check tripCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTripCost())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFleetTripUpdatableRelationshipsEquals(FleetTrip expected, FleetTrip actual) {
        // empty method
    }
}
