package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class JournalLineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJournalLineAllPropertiesEquals(JournalLine expected, JournalLine actual) {
        assertJournalLineAutoGeneratedPropertiesEquals(expected, actual);
        assertJournalLineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJournalLineAllUpdatablePropertiesEquals(JournalLine expected, JournalLine actual) {
        assertJournalLineUpdatableFieldsEquals(expected, actual);
        assertJournalLineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJournalLineAutoGeneratedPropertiesEquals(JournalLine expected, JournalLine actual) {
        assertThat(actual)
            .as("Verify JournalLine auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJournalLineUpdatableFieldsEquals(JournalLine expected, JournalLine actual) {
        assertThat(actual)
            .as("Verify JournalLine relevant properties")
            .satisfies(a -> assertThat(a.getJournalId()).as("check journalId").isEqualTo(expected.getJournalId()))
            .satisfies(a -> assertThat(a.getAccountId()).as("check accountId").isEqualTo(expected.getAccountId()))
            .satisfies(a -> assertThat(a.getDebit()).as("check debit").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDebit()))
            .satisfies(a ->
                assertThat(a.getCredit()).as("check credit").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getCredit())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertJournalLineUpdatableRelationshipsEquals(JournalLine expected, JournalLine actual) {
        // empty method
    }
}
