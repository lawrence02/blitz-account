package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VATRateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVATRateAllPropertiesEquals(VATRate expected, VATRate actual) {
        assertVATRateAutoGeneratedPropertiesEquals(expected, actual);
        assertVATRateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVATRateAllUpdatablePropertiesEquals(VATRate expected, VATRate actual) {
        assertVATRateUpdatableFieldsEquals(expected, actual);
        assertVATRateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVATRateAutoGeneratedPropertiesEquals(VATRate expected, VATRate actual) {
        assertThat(actual)
            .as("Verify VATRate auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVATRateUpdatableFieldsEquals(VATRate expected, VATRate actual) {
        assertThat(actual)
            .as("Verify VATRate relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a ->
                assertThat(a.getPercentage())
                    .as("check percentage")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPercentage())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVATRateUpdatableRelationshipsEquals(VATRate expected, VATRate actual) {
        // empty method
    }
}
