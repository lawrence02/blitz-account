package com.blitz.account.domain;

import static com.blitz.account.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ExchangeRateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateAllPropertiesEquals(ExchangeRate expected, ExchangeRate actual) {
        assertExchangeRateAutoGeneratedPropertiesEquals(expected, actual);
        assertExchangeRateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateAllUpdatablePropertiesEquals(ExchangeRate expected, ExchangeRate actual) {
        assertExchangeRateUpdatableFieldsEquals(expected, actual);
        assertExchangeRateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateAutoGeneratedPropertiesEquals(ExchangeRate expected, ExchangeRate actual) {
        assertThat(actual)
            .as("Verify ExchangeRate auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateUpdatableFieldsEquals(ExchangeRate expected, ExchangeRate actual) {
        assertThat(actual)
            .as("Verify ExchangeRate relevant properties")
            .satisfies(a -> assertThat(a.getBaseCurrencyId()).as("check baseCurrencyId").isEqualTo(expected.getBaseCurrencyId()))
            .satisfies(a -> assertThat(a.getTargetCurrencyId()).as("check targetCurrencyId").isEqualTo(expected.getTargetCurrencyId()))
            .satisfies(a -> assertThat(a.getRate()).as("check rate").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getRate()))
            .satisfies(a -> assertThat(a.getRateDate()).as("check rateDate").isEqualTo(expected.getRateDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateUpdatableRelationshipsEquals(ExchangeRate expected, ExchangeRate actual) {
        // empty method
    }
}
